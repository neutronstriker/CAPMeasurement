
CAPMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000f22  00000fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800158  00800158  0000100e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e90  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f7  00000000  00000000  00001fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055a  00000000  00000000  000023d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069f  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000104b  00000000  00000000  000033ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000043f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	42 6f       	ori	r20, 0xF2	; 242
  6a:	61 72       	andi	r22, 0x21	; 33
  6c:	64 20       	and	r6, r4
  6e:	49 6e       	ori	r20, 0xE9	; 233
  70:	69 74       	andi	r22, 0x49	; 73
  72:	69 61       	ori	r22, 0x19	; 25
  74:	6c 69       	ori	r22, 0x9C	; 156
  76:	7a 65       	ori	r23, 0x5A	; 90
  78:	64 0d       	add	r22, r4
  7a:	0a 00       	.word	0x000a	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e2       	ldi	r30, 0x22	; 34
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 35       	cpi	r26, 0x58	; 88
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a8 e5       	ldi	r26, 0x58	; 88
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 36       	cpi	r26, 0x6C	; 108
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <main>
  b2:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z4pushh>:
	{
		negativeFlag=1;
		number *= -1;
	}
	
	while(number>0)
  ba:	20 91 04 01 	lds	r18, 0x0104
		reverse_number = reverse_number * 10 + number%10;
		number = number/10;
	}
	
	
	number = num;
  be:	30 91 05 01 	lds	r19, 0x0105
  c2:	23 31       	cpi	r18, 0x13	; 19
  c4:	31 05       	cpc	r19, r1
  c6:	51 f0       	breq	.+20     	; 0xdc <_Z4pushh+0x22>
	
	if(number==0)
	zeroFlag=1;
	
	
	if(negativeFlag)
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
	number *= -1;
  cc:	30 93 05 01 	sts	0x0105, r19
  d0:	20 93 04 01 	sts	0x0104, r18
  d4:	f9 01       	movw	r30, r18
  d6:	e8 5a       	subi	r30, 0xA8	; 168
  d8:	fe 4f       	sbci	r31, 0xFE	; 254
  da:	80 83       	st	Z, r24
	
	while(number > 0)
  dc:	08 95       	ret

000000de <_Z10baud_errorjm>:
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	6a 01       	movw	r12, r20
	{
		number = number / 10;
  e8:	7b 01       	movw	r14, r22
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	aa 1f       	adc	r26, r26
  f6:	bb 1f       	adc	r27, r27
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	aa 1f       	adc	r26, r26
  fe:	bb 1f       	adc	r27, r27
 100:	9c 01       	movw	r18, r24
		intcount++;
 102:	ad 01       	movw	r20, r26
	
	
	if(negativeFlag)
	number *= -1;
	
	while(number > 0)
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	44 1f       	adc	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	44 1f       	adc	r20, r20
	
	
	uint8_t i=0;
	
	
	if(negativeFlag)
 112:	55 1f       	adc	r21, r21
 114:	60 e0       	ldi	r22, 0x00	; 0
	{
		uart_write('-');
 116:	74 e2       	ldi	r23, 0x24	; 36
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if(zeroFlag)
 11c:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 120:	2c 19       	sub	r18, r12
 122:	3d 09       	sbc	r19, r13
	{
		uart_write('0');
 124:	d9 01       	movw	r26, r18
 126:	bb 23       	and	r27, r27
 128:	24 f4       	brge	.+8      	; 0x132 <_Z10baud_errorjm+0x54>
	}
	
	while(reverse_number > 0)
 12a:	aa 27       	eor	r26, r26
 12c:	bb 27       	eor	r27, r27
 12e:	a2 1b       	sub	r26, r18
 130:	b3 0b       	sbc	r27, r19
 132:	24 e6       	ldi	r18, 0x64	; 100
 134:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(i==intcount)
		uart_write('.');

		uart_write(reverse_number%10 + 0x30);
 136:	0e 94 74 07 	call	0xee8	; 0xee8 <__usmulhisi3>
 13a:	a7 01       	movw	r20, r14
 13c:	96 01       	movw	r18, r12
 13e:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 142:	c9 01       	movw	r24, r18
		uart_write('0');
	}
	
	while(reverse_number > 0)
	{
		if(i==intcount)
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
		uart_write('.');
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	08 95       	ret

0000014e <_Z9uart_initm>:

		uart_write(reverse_number%10 + 0x30);
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	6b 01       	movw	r12, r22
 15c:	7c 01       	movw	r14, r24
 15e:	dc 01       	movw	r26, r24
 160:	cb 01       	movw	r24, r22
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
		
		reverse_number = reverse_number/10;
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	aa 1f       	adc	r26, r26
 170:	bb 1f       	adc	r27, r27
		i++;
 172:	9c 01       	movw	r18, r24
	if(zeroFlag)
	{
		uart_write('0');
	}
	
	while(reverse_number > 0)
 174:	ad 01       	movw	r20, r26
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	44 1f       	adc	r20, r20
 17c:	55 1f       	adc	r21, r21
		uart_write(reverse_number%10 + 0x30);
		
		reverse_number = reverse_number/10;
		i++;
	}
}
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	44 1f       	adc	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	74 e2       	ldi	r23, 0x24	; 36
 18a:	84 ef       	ldi	r24, 0xF4	; 244
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 192:	e9 01       	movw	r28, r18
 194:	21 97       	sbiw	r28, 0x01	; 1
 196:	b7 01       	movw	r22, r14
 198:	a6 01       	movw	r20, r12
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 6f 00 	call	0xde	; 0xde <_Z10baud_errorjm>
	//check the reason for making another version of this program in above commented
	//out old version of this.

	unsigned int UBRR_VAL = ((F_CPU/(16UL * BAUD))-1);
	
	if(baud_error(UBRR_VAL,BAUD) >= 2)  //check baud error percentage
 1a0:	02 97       	sbiw	r24, 0x02	; 2
 1a2:	f4 f0       	brlt	.+60     	; 0x1e0 <_Z9uart_initm+0x92>
	{
			UCSR0A |= (1<<U2X0);
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
			UBRR_VAL = ((F_CPU/(16UL * (BAUD/2)))-1);
 1ae:	d7 01       	movw	r26, r14
 1b0:	c6 01       	movw	r24, r12
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	9c 01       	movw	r18, r24
 1c6:	ad 01       	movw	r20, r26
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	44 1f       	adc	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	74 e2       	ldi	r23, 0x24	; 36
 1d4:	84 ef       	ldi	r24, 0xF4	; 244
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 1dc:	e9 01       	movw	r28, r18
 1de:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	UBRR0L = UBRR_VAL;
 1e0:	c0 93 c4 00 	sts	0x00C4, r28
	UBRR0H = UBRR_VAL>>8;
 1e4:	d0 93 c5 00 	sts	0x00C5, r29
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 1e8:	88 e1       	ldi	r24, 0x18	; 24
 1ea:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); //in atmega328p there is no URSEL bit
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	80 93 c2 00 	sts	0x00C2, r24
	
	if(baud_error(UBRR_VAL,BAUD) >= 2)
 1f4:	b7 01       	movw	r22, r14
 1f6:	a6 01       	movw	r20, r12
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 6f 00 	call	0xde	; 0xde <_Z10baud_errorjm>
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 97       	sbiw	r24, 0x02	; 2
 204:	14 f0       	brlt	.+4      	; 0x20a <_Z9uart_initm+0xbc>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
		return 0; //there is higher percentage of error in UART, but it has been initialised.
	else 
		return 1; //serial port initialised succesfully

}
 20a:	c9 01       	movw	r24, r18
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	08 95       	ret

0000021a <_Z10uart_writeh>:
	return data;
}

void uart_write(unsigned char data)
{
	UDR0=data;			//when I use a combination of Serial.print and uart_print or uart_write
 21a:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)));		//in a project, then Serial.print doesn't expect any other software
 21e:	e0 ec       	ldi	r30, 0xC0	; 192
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	85 ff       	sbrs	r24, 5
 226:	fd cf       	rjmp	.-6      	; 0x222 <_Z10uart_writeh+0x8>
	UCSR0A |= (1<<UDRE0);			//accessing the UART so, since it uses a software buffer and interrupt
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 62       	ori	r24, 0x20	; 32
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <_Z7u_printPKc>:
}									//if I use a my uart_write function immediately after a Serial.print
									//then generally my data gets lost of garbled because my uart_write
									//first writes the data then waits until uart is empty, not the other way.
				
void u_print(char const* string) //if you don't write const* then gcc throws a warning -Wwrite string.
{
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
	uint8_t i=0;
	while(string[i] != '\0')
 23c:	88 81       	ld	r24, Y
 23e:	88 23       	and	r24, r24
 240:	51 f0       	breq	.+20     	; 0x256 <_Z7u_printPKc+0x22>
									//then generally my data gets lost of garbled because my uart_write
									//first writes the data then waits until uart is empty, not the other way.
				
void u_print(char const* string) //if you don't write const* then gcc throws a warning -Wwrite string.
{
	uint8_t i=0;
 242:	10 e0       	ldi	r17, 0x00	; 0
	while(string[i] != '\0')
	{
		uart_write(string[i]);
 244:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
		i++;
 248:	1f 5f       	subi	r17, 0xFF	; 255
									//first writes the data then waits until uart is empty, not the other way.
				
void u_print(char const* string) //if you don't write const* then gcc throws a warning -Wwrite string.
{
	uint8_t i=0;
	while(string[i] != '\0')
 24a:	fe 01       	movw	r30, r28
 24c:	e1 0f       	add	r30, r17
 24e:	f1 1d       	adc	r31, r1
 250:	80 81       	ld	r24, Z
 252:	81 11       	cpse	r24, r1
 254:	f7 cf       	rjmp	.-18     	; 0x244 <_Z7u_printPKc+0x10>
	{
		uart_write(string[i]);
		i++;
	}
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <_Z9u_print_pPKc>:
//The below mentioned definition and function help in saving a lot of RAM by saving
//strings that are to pe printed in ROM instead of RAM
#define u_printPMEM(x) u_print_p(PSTR(x))

void u_print_p(const char *start)
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
	while(pgm_read_byte(start) != '\0')
 264:	fe 01       	movw	r30, r28
 266:	24 91       	lpm	r18, Z
 268:	22 23       	and	r18, r18
 26a:	51 f0       	breq	.+20     	; 0x280 <_Z9u_print_pPKc+0x22>
	{
		uart_write(pgm_read_byte(start++));
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	fc 01       	movw	r30, r24
 270:	84 91       	lpm	r24, Z
 272:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
//strings that are to pe printed in ROM instead of RAM
#define u_printPMEM(x) u_print_p(PSTR(x))

void u_print_p(const char *start)
{
	while(pgm_read_byte(start) != '\0')
 276:	ce 01       	movw	r24, r28
 278:	fe 01       	movw	r30, r28
 27a:	24 91       	lpm	r18, Z
 27c:	21 11       	cpse	r18, r1
 27e:	f6 cf       	rjmp	.-20     	; 0x26c <_Z9u_print_pPKc+0xe>
	{
		uart_write(pgm_read_byte(start++));
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <_Z13uart_printnuml>:
	uart_write(a);
	uart_write(' ');
}

void uart_printnum(long int number)
{
 286:	8f 92       	push	r8
 288:	9f 92       	push	r9
 28a:	af 92       	push	r10
 28c:	bf 92       	push	r11
 28e:	cf 92       	push	r12
 290:	df 92       	push	r13
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24
	unsigned char temp=0;

	if(number == 0)
 2a2:	61 15       	cp	r22, r1
 2a4:	71 05       	cpc	r23, r1
 2a6:	81 05       	cpc	r24, r1
 2a8:	91 05       	cpc	r25, r1
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <_Z13uart_printnuml+0x2e>
	{
		uart_write('0');
 2ac:	80 e3       	ldi	r24, 0x30	; 48
 2ae:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
		return;
 2b2:	45 c0       	rjmp	.+138    	; 0x33e <_Z13uart_printnuml+0xb8>
	}

	if(number < 0)
 2b4:	99 23       	and	r25, r25
 2b6:	5c f4       	brge	.+22     	; 0x2ce <_Z13uart_printnuml+0x48>
	{
		number = number * -1;
 2b8:	f0 94       	com	r15
 2ba:	e0 94       	com	r14
 2bc:	d0 94       	com	r13
 2be:	c0 94       	com	r12
 2c0:	c1 1c       	adc	r12, r1
 2c2:	d1 1c       	adc	r13, r1
 2c4:	e1 1c       	adc	r14, r1
 2c6:	f1 1c       	adc	r15, r1
		uart_write('-');
 2c8:	8d e2       	ldi	r24, 0x2D	; 45
 2ca:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
	}

	while(number > 0)
 2ce:	1c 14       	cp	r1, r12
 2d0:	1d 04       	cpc	r1, r13
 2d2:	1e 04       	cpc	r1, r14
 2d4:	1f 04       	cpc	r1, r15
 2d6:	f4 f4       	brge	.+60     	; 0x314 <_Z13uart_printnuml+0x8e>
	{
		temp = number%10;
 2d8:	0f 2e       	mov	r0, r31
 2da:	fa e0       	ldi	r31, 0x0A	; 10
 2dc:	8f 2e       	mov	r8, r31
 2de:	91 2c       	mov	r9, r1
 2e0:	a1 2c       	mov	r10, r1
 2e2:	b1 2c       	mov	r11, r1
 2e4:	f0 2d       	mov	r31, r0
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	a5 01       	movw	r20, r10
 2ec:	94 01       	movw	r18, r8
 2ee:	0e 94 46 07 	call	0xe8c	; 0xe8c <__divmodsi4>
 2f2:	02 2f       	mov	r16, r18
 2f4:	13 2f       	mov	r17, r19
 2f6:	d4 2f       	mov	r29, r20
 2f8:	c5 2f       	mov	r28, r21
		temp += 0x30;
		push(temp);
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	86 0f       	add	r24, r22
 2fe:	0e 94 5d 00 	call	0xba	; 0xba <_Z4pushh>
		number = number/10;
 302:	c0 2e       	mov	r12, r16
 304:	d1 2e       	mov	r13, r17
 306:	ed 2e       	mov	r14, r29
 308:	fc 2e       	mov	r15, r28
	{
		number = number * -1;
		uart_write('-');
	}

	while(number > 0)
 30a:	1c 14       	cp	r1, r12
 30c:	1d 04       	cpc	r1, r13
 30e:	1e 04       	cpc	r1, r14
 310:	1f 04       	cpc	r1, r15
 312:	4c f3       	brlt	.-46     	; 0x2e6 <_Z13uart_printnuml+0x60>
		temp += 0x30;
		push(temp);
		number = number/10;
	}

	for(int8_t i=top;i>=0;i--)
 314:	f0 90 04 01 	lds	r15, 0x0104
 318:	ff 20       	and	r15, r15
 31a:	5c f0       	brlt	.+22     	; 0x332 <_Z13uart_printnuml+0xac>
		uart_write(stack[i]);
 31c:	ef 2d       	mov	r30, r15
 31e:	ff 27       	eor	r31, r31
 320:	e7 fd       	sbrc	r30, 7
 322:	f0 95       	com	r31
 324:	e8 5a       	subi	r30, 0xA8	; 168
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	80 81       	ld	r24, Z
 32a:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
		temp += 0x30;
		push(temp);
		number = number/10;
	}

	for(int8_t i=top;i>=0;i--)
 32e:	fa 94       	dec	r15
 330:	ac f7       	brge	.-22     	; 0x31c <_Z13uart_printnuml+0x96>
		uart_write(stack[i]);

	top = -1; // re-initialize stack pointer
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	90 93 05 01 	sts	0x0105, r25
 33a:	80 93 04 01 	sts	0x0104, r24


}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	bf 90       	pop	r11
 350:	af 90       	pop	r10
 352:	9f 90       	pop	r9
 354:	8f 90       	pop	r8
 356:	08 95       	ret

00000358 <_Z7mypow10h>:


uint32_t mypow10(uint8_t power)	//pow10 is an internal function can't use same name, but it is not there in avrlibrary
{								//but still gives the error message. This is because according to the compiler it is a
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	f8 2f       	mov	r31, r24
	//a GCC built-in function but there is no reference to its symbols so linker is unable
	//to link it. Anyway we can't use the name.
	uint32_t value=1;
	
	if(power == 0)
 35e:	88 23       	and	r24, r24
 360:	f9 f0       	breq	.+62     	; 0x3a0 <_Z7mypow10h+0x48>
 362:	e1 e0       	ldi	r30, 0x01	; 1
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
	return value;
	
	for(uint8_t i=1;i<=power;i++)
	value*=10;
 36c:	ab 01       	movw	r20, r22
 36e:	bc 01       	movw	r22, r24
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	66 1f       	adc	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	8a 01       	movw	r16, r20
 37a:	9b 01       	movw	r18, r22
 37c:	00 0f       	add	r16, r16
 37e:	11 1f       	adc	r17, r17
 380:	22 1f       	adc	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	00 0f       	add	r16, r16
 386:	11 1f       	adc	r17, r17
 388:	22 1f       	adc	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	cb 01       	movw	r24, r22
 38e:	ba 01       	movw	r22, r20
 390:	60 0f       	add	r22, r16
 392:	71 1f       	adc	r23, r17
 394:	82 1f       	adc	r24, r18
 396:	93 1f       	adc	r25, r19
	uint32_t value=1;
	
	if(power == 0)
	return value;
	
	for(uint8_t i=1;i<=power;i++)
 398:	ef 5f       	subi	r30, 0xFF	; 255
 39a:	fe 17       	cp	r31, r30
 39c:	38 f7       	brcc	.-50     	; 0x36c <_Z7mypow10h+0x14>
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <_Z7mypow10h+0x50>
	//a GCC built-in function but there is no reference to its symbols so linker is unable
	//to link it. Anyway we can't use the name.
	uint32_t value=1;
	
	if(power == 0)
	return value;
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t i=1;i<=power;i++)
	value*=10;
	
	return value;
}
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <_Z23uart_printFloat_Precisefh>:
	dtostrf(num,10,precision,printable);
	u_print(printable);
}

void uart_printFloat_Precise(float real_num, uint8_t precision)
{
 3ae:	4f 92       	push	r4
 3b0:	5f 92       	push	r5
 3b2:	6f 92       	push	r6
 3b4:	7f 92       	push	r7
 3b6:	8f 92       	push	r8
 3b8:	9f 92       	push	r9
 3ba:	af 92       	push	r10
 3bc:	bf 92       	push	r11
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	6b 01       	movw	r12, r22
 3ce:	7c 01       	movw	r14, r24
 3d0:	14 2f       	mov	r17, r20
	float fraction;
	long integer_num;
	uint32_t tail, reversed_tail=0;
	uint8_t negativeFlag=0;
	
	if(real_num < 0)
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	a9 01       	movw	r20, r18
 3d8:	0e 94 5e 05 	call	0xabc	; 0xabc <__cmpsf2>
 3dc:	88 23       	and	r24, r24
 3de:	34 f4       	brge	.+12     	; 0x3ec <_Z23uart_printFloat_Precisefh+0x3e>
	{
		negativeFlag = 1;
		real_num *= -1;
 3e0:	f7 fa       	bst	r15, 7
 3e2:	f0 94       	com	r15
 3e4:	f7 f8       	bld	r15, 7
 3e6:	f0 94       	com	r15
	uint32_t tail, reversed_tail=0;
	uint8_t negativeFlag=0;
	
	if(real_num < 0)
	{
		negativeFlag = 1;
 3e8:	c1 e0       	ldi	r28, 0x01	; 1
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <_Z23uart_printFloat_Precisefh+0x40>
	//for a more elaborate description and comparision of these PrintFloat()'s
	//refer to testFloat project.
	float fraction;
	long integer_num;
	uint32_t tail, reversed_tail=0;
	uint8_t negativeFlag=0;
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
	{
		negativeFlag = 1;
		real_num *= -1;
	}

	integer_num = real_num;
 3ee:	c7 01       	movw	r24, r14
 3f0:	b6 01       	movw	r22, r12
 3f2:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fixsfsi>
 3f6:	4b 01       	movw	r8, r22
 3f8:	5c 01       	movw	r10, r24
	
	fraction = 1 + real_num - integer_num;
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e8       	ldi	r20, 0x80	; 128
 400:	5f e3       	ldi	r21, 0x3F	; 63
 402:	c7 01       	movw	r24, r14
 404:	b6 01       	movw	r22, r12
 406:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__addsf3>
 40a:	6b 01       	movw	r12, r22
 40c:	7c 01       	movw	r14, r24
 40e:	c5 01       	movw	r24, r10
 410:	b4 01       	movw	r22, r8
 412:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__floatsisf>
 416:	9b 01       	movw	r18, r22
 418:	ac 01       	movw	r20, r24
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__subsf3>
 422:	6b 01       	movw	r12, r22
 424:	7c 01       	movw	r14, r24
	
	tail = fraction * mypow10(precision);
 426:	81 2f       	mov	r24, r17
 428:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7mypow10h>
 42c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatunsisf>
 430:	a7 01       	movw	r20, r14
 432:	96 01       	movw	r18, r12
 434:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__mulsf3>
 438:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixunssfsi>
	
	while(tail>0)
 43c:	61 15       	cp	r22, r1
 43e:	71 05       	cpc	r23, r1
 440:	81 05       	cpc	r24, r1
 442:	91 05       	cpc	r25, r1
 444:	71 f1       	breq	.+92     	; 0x4a2 <_Z23uart_printFloat_Precisefh+0xf4>
	//consumes less code memory and is more precise, but is slightly slower
	//for a more elaborate description and comparision of these PrintFloat()'s
	//refer to testFloat project.
	float fraction;
	long integer_num;
	uint32_t tail, reversed_tail=0;
 446:	c1 2c       	mov	r12, r1
 448:	d1 2c       	mov	r13, r1
 44a:	76 01       	movw	r14, r12
	
	tail = fraction * mypow10(precision);
	
	while(tail>0)
	{
		reversed_tail = reversed_tail*10 + tail%10;
 44c:	0f 2e       	mov	r0, r31
 44e:	fa e0       	ldi	r31, 0x0A	; 10
 450:	4f 2e       	mov	r4, r31
 452:	51 2c       	mov	r5, r1
 454:	61 2c       	mov	r6, r1
 456:	71 2c       	mov	r7, r1
 458:	f0 2d       	mov	r31, r0
 45a:	cc 0c       	add	r12, r12
 45c:	dd 1c       	adc	r13, r13
 45e:	ee 1c       	adc	r14, r14
 460:	ff 1c       	adc	r15, r15
 462:	97 01       	movw	r18, r14
 464:	86 01       	movw	r16, r12
 466:	00 0f       	add	r16, r16
 468:	11 1f       	adc	r17, r17
 46a:	22 1f       	adc	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	00 0f       	add	r16, r16
 470:	11 1f       	adc	r17, r17
 472:	22 1f       	adc	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	c0 0e       	add	r12, r16
 478:	d1 1e       	adc	r13, r17
 47a:	e2 1e       	adc	r14, r18
 47c:	f3 1e       	adc	r15, r19
 47e:	a3 01       	movw	r20, r6
 480:	92 01       	movw	r18, r4
 482:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 486:	c6 0e       	add	r12, r22
 488:	d7 1e       	adc	r13, r23
 48a:	e8 1e       	adc	r14, r24
 48c:	f9 1e       	adc	r15, r25
		tail = tail/10;
 48e:	62 2f       	mov	r22, r18
 490:	73 2f       	mov	r23, r19
 492:	84 2f       	mov	r24, r20
 494:	95 2f       	mov	r25, r21
	
	fraction = 1 + real_num - integer_num;
	
	tail = fraction * mypow10(precision);
	
	while(tail>0)
 496:	61 15       	cp	r22, r1
 498:	71 05       	cpc	r23, r1
 49a:	81 05       	cpc	r24, r1
 49c:	91 05       	cpc	r25, r1
 49e:	e9 f6       	brne	.-70     	; 0x45a <_Z23uart_printFloat_Precisefh+0xac>
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <_Z23uart_printFloat_Precisefh+0xfa>
	//consumes less code memory and is more precise, but is slightly slower
	//for a more elaborate description and comparision of these PrintFloat()'s
	//refer to testFloat project.
	float fraction;
	long integer_num;
	uint32_t tail, reversed_tail=0;
 4a2:	c1 2c       	mov	r12, r1
 4a4:	d1 2c       	mov	r13, r1
 4a6:	76 01       	movw	r14, r12
	{
		reversed_tail = reversed_tail*10 + tail%10;
		tail = tail/10;
	}
	
	if(negativeFlag)
 4a8:	cc 23       	and	r28, r28
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <_Z23uart_printFloat_Precisefh+0x104>
	uart_write('-');
 4ac:	8d e2       	ldi	r24, 0x2D	; 45
 4ae:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>

	uart_printnum(integer_num);
 4b2:	c5 01       	movw	r24, r10
 4b4:	b4 01       	movw	r22, r8
 4b6:	0e 94 43 01 	call	0x286	; 0x286 <_Z13uart_printnuml>

	uart_write('.');
 4ba:	8e e2       	ldi	r24, 0x2E	; 46
 4bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
	
	reversed_tail = reversed_tail /10;
 4c0:	c7 01       	movw	r24, r14
 4c2:	b6 01       	movw	r22, r12
 4c4:	2a e0       	ldi	r18, 0x0A	; 10
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 4d0:	ca 01       	movw	r24, r20
 4d2:	b9 01       	movw	r22, r18
	
	while(reversed_tail>0)
 4d4:	21 15       	cp	r18, r1
 4d6:	31 05       	cpc	r19, r1
 4d8:	41 05       	cpc	r20, r1
 4da:	51 05       	cpc	r21, r1
 4dc:	e1 f0       	breq	.+56     	; 0x516 <_Z23uart_printFloat_Precisefh+0x168>
	{
		uart_write(reversed_tail%10+0x30);
 4de:	0f 2e       	mov	r0, r31
 4e0:	fa e0       	ldi	r31, 0x0A	; 10
 4e2:	cf 2e       	mov	r12, r31
 4e4:	d1 2c       	mov	r13, r1
 4e6:	e1 2c       	mov	r14, r1
 4e8:	f1 2c       	mov	r15, r1
 4ea:	f0 2d       	mov	r31, r0
 4ec:	a7 01       	movw	r20, r14
 4ee:	96 01       	movw	r18, r12
 4f0:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 4f4:	b2 2e       	mov	r11, r18
 4f6:	03 2f       	mov	r16, r19
 4f8:	14 2f       	mov	r17, r20
 4fa:	c5 2f       	mov	r28, r21
 4fc:	80 e3       	ldi	r24, 0x30	; 48
 4fe:	86 0f       	add	r24, r22
 500:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z10uart_writeh>
		reversed_tail = reversed_tail/10;
 504:	6b 2d       	mov	r22, r11
 506:	70 2f       	mov	r23, r16
 508:	81 2f       	mov	r24, r17
 50a:	9c 2f       	mov	r25, r28

	uart_write('.');
	
	reversed_tail = reversed_tail /10;
	
	while(reversed_tail>0)
 50c:	61 15       	cp	r22, r1
 50e:	71 05       	cpc	r23, r1
 510:	81 05       	cpc	r24, r1
 512:	91 05       	cpc	r25, r1
 514:	59 f7       	brne	.-42     	; 0x4ec <_Z23uart_printFloat_Precisefh+0x13e>
	{
		uart_write(reversed_tail%10+0x30);
		reversed_tail = reversed_tail/10;
	}
}
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	df 90       	pop	r13
 522:	cf 90       	pop	r12
 524:	bf 90       	pop	r11
 526:	af 90       	pop	r10
 528:	9f 90       	pop	r9
 52a:	8f 90       	pop	r8
 52c:	7f 90       	pop	r7
 52e:	6f 90       	pop	r6
 530:	5f 90       	pop	r5
 532:	4f 90       	pop	r4
 534:	08 95       	ret

00000536 <_Z15uart_printFloatfz>:
	
	return value;
}

void uart_printFloat(float num,...)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	int precision;
	
	va_list arg_list;//declare "arg_list" a variable of type va_list
	va_start(arg_list,num);//initialize the variable with "va_start" which takes
	//two arguments the list and first argument in this function
	precision=va_arg(arg_list,int);//when va_arg is called with the argument of list and a datatype
 53e:	49 85       	ldd	r20, Y+9	; 0x09
 540:	5a 85       	ldd	r21, Y+10	; 0x0a
 542:	47 30       	cpi	r20, 0x07	; 7
 544:	51 05       	cpc	r21, r1
 546:	14 f0       	brlt	.+4      	; 0x54c <_Z15uart_printFloatfz+0x16>
 548:	46 e0       	ldi	r20, 0x06	; 6
 54a:	50 e0       	ldi	r21, 0x00	; 0
	// it returns next value of that type in the list if it exists
	//if it doesn't exist if returns NULL or 0 (tested in Turbo C)
	
	if(precision>6)
	precision = 6;
	if(precision<1)
 54c:	14 16       	cp	r1, r20
 54e:	15 06       	cpc	r1, r21
 550:	14 f0       	brlt	.+4      	; 0x556 <_Z15uart_printFloatfz+0x20>
	precision = 2;
 552:	42 e0       	ldi	r20, 0x02	; 2
 554:	50 e0       	ldi	r21, 0x00	; 0
	
	#if FLOAT_PRINT_TYPE == FAST
	uart_printFloat_Fast(num,precision);
	#else
	uart_printFloat_Precise(num,precision);
 556:	6d 81       	ldd	r22, Y+5	; 0x05
 558:	7e 81       	ldd	r23, Y+6	; 0x06
 55a:	8f 81       	ldd	r24, Y+7	; 0x07
 55c:	98 85       	ldd	r25, Y+8	; 0x08
 55e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z23uart_printFloat_Precisefh>
	#endif

	va_end(arg_list);
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <_Z8adc_initv>:
    }
}

void adc_init()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //clk divided by 128 for highest accuracy.
 568:	87 e8       	ldi	r24, 0x87	; 135
 56a:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = (1<<REFS0)|(1<<REFS1) ; //Internal Vbg 1.1V as Reference
 56e:	80 ec       	ldi	r24, 0xC0	; 192
 570:	80 93 7c 00 	sts	0x007C, r24
 574:	08 95       	ret

00000576 <_Z8adc_readh>:
}

unsigned int adc_read(unsigned char channel)
{
	ADMUX |= (0b00001111 & channel); //there are some other uses of channel values beyond 0-7, read datasheet of 328p for more clarification.
 576:	ec e7       	ldi	r30, 0x7C	; 124
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	90 81       	ld	r25, Z
 57c:	8f 70       	andi	r24, 0x0F	; 15
 57e:	98 2b       	or	r25, r24
 580:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
 582:	ea e7       	ldi	r30, 0x7A	; 122
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	80 64       	ori	r24, 0x40	; 64
 58a:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF)) == 0);
 58c:	80 81       	ld	r24, Z
 58e:	84 ff       	sbrs	r24, 4
 590:	fd cf       	rjmp	.-6      	; 0x58c <_Z8adc_readh+0x16>
	ADCSRA |= (1<<ADIF);
 592:	ea e7       	ldi	r30, 0x7A	; 122
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	80 83       	st	Z, r24
	return ADC;
 59c:	80 91 78 00 	lds	r24, 0x0078
 5a0:	90 91 79 00 	lds	r25, 0x0079
}
 5a4:	08 95       	ret

000005a6 <_Z26configure_AnalogComparatorv>:

void configure_AnalogComparator()
{
	ADCSRA &= ~(1<<ADEN);	//disable ADC since we will be using one of ADC channels as VIN- for Comparator.
 5a6:	ea e7       	ldi	r30, 0x7A	; 122
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	8f 77       	andi	r24, 0x7F	; 127
 5ae:	80 83       	st	Z, r24
	ADMUX = 0;	//selecting channel i.e. pin A0 as VIN- substitute the principle is same as selecting ADC channel for ADC conversion
 5b0:	10 92 7c 00 	sts	0x007C, r1
				//however since we don't need REFS I am removing the overhead required in retaining those settings.
	ADCSRB |= (1<<ACME);
 5b4:	eb e7       	ldi	r30, 0x7B	; 123
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 64       	ori	r24, 0x40	; 64
 5bc:	80 83       	st	Z, r24
	ACSR = (1<<ACIC);	//enable Comparator, don't select Vbg as VIN+, no interrupts, Connect output to ICP1.
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	80 bf       	out	0x30, r24	; 48
 5c2:	08 95       	ret

000005c4 <_Z23configure_Timer_and_ICPv>:
}

void configure_Timer_and_ICP()
{
	PRR &= ~(1<<PRTIM1); //Enable Timer1 (in power reduction register PRR)
 5c4:	e4 e6       	ldi	r30, 0x64	; 100
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	87 7f       	andi	r24, 0xF7	; 247
 5cc:	80 83       	st	Z, r24
	TIFR1 |= (1<<ICF1); //clear the Input Capture Interrupt flag, which was set due to change the ICP source from pin to ACO.
 5ce:	b5 9a       	sbi	0x16, 5	; 22
	TCCR1A = 0;
 5d0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0; //clear all settings 
 5d4:	e1 e8       	ldi	r30, 0x81	; 129
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	10 82       	st	Z, r1
	TCCR1B &= ~(1<<ICES1); //Capture on Falling edge.
 5da:	80 81       	ld	r24, Z
 5dc:	8f 7b       	andi	r24, 0xBF	; 191
 5de:	80 83       	st	Z, r24
	TIMSK1 = (1<<ICIE1);
 5e0:	80 e2       	ldi	r24, 0x20	; 32
 5e2:	80 93 6f 00 	sts	0x006F, r24
 5e6:	08 95       	ret

000005e8 <_Z10startTimerh>:
}

void startTimer(uint8_t val)
{
	TCCR1B &= ~(0x07);
 5e8:	e1 e8       	ldi	r30, 0x81	; 129
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	90 81       	ld	r25, Z
 5ee:	98 7f       	andi	r25, 0xF8	; 248
 5f0:	90 83       	st	Z, r25
	switch(val)
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	01 f1       	breq	.+64     	; 0x636 <_Z10startTimerh+0x4e>
 5f6:	30 f4       	brcc	.+12     	; 0x604 <_Z10startTimerh+0x1c>
 5f8:	88 23       	and	r24, r24
 5fa:	09 f4       	brne	.+2      	; 0x5fe <_Z10startTimerh+0x16>
 5fc:	52 c0       	rjmp	.+164    	; 0x6a2 <_Z10startTimerh+0xba>
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	41 f0       	breq	.+16     	; 0x612 <_Z10startTimerh+0x2a>
 602:	08 95       	ret
 604:	84 30       	cpi	r24, 0x04	; 4
 606:	d9 f1       	breq	.+118    	; 0x67e <_Z10startTimerh+0x96>
 608:	40 f1       	brcs	.+80     	; 0x65a <_Z10startTimerh+0x72>
 60a:	85 30       	cpi	r24, 0x05	; 5
 60c:	09 f4       	brne	.+2      	; 0x610 <_Z10startTimerh+0x28>
 60e:	49 c0       	rjmp	.+146    	; 0x6a2 <_Z10startTimerh+0xba>
 610:	08 95       	ret
	{
		case 1:	TCCR1B |= (DIVIDE_BY_1);
 612:	e1 e8       	ldi	r30, 0x81	; 129
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	80 83       	st	Z, r24
		time_period = 0.0625;
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a0 e8       	ldi	r26, 0x80	; 128
 622:	bd e3       	ldi	r27, 0x3D	; 61
 624:	80 93 00 01 	sts	0x0100, r24
 628:	90 93 01 01 	sts	0x0101, r25
 62c:	a0 93 02 01 	sts	0x0102, r26
 630:	b0 93 03 01 	sts	0x0103, r27
		break;
 634:	08 95       	ret
		case 2:	TCCR1B |= (DIVIDE_BY_8);
 636:	e1 e8       	ldi	r30, 0x81	; 129
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	80 83       	st	Z, r24
		time_period = 0.5;
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	a0 e0       	ldi	r26, 0x00	; 0
 646:	bf e3       	ldi	r27, 0x3F	; 63
 648:	80 93 00 01 	sts	0x0100, r24
 64c:	90 93 01 01 	sts	0x0101, r25
 650:	a0 93 02 01 	sts	0x0102, r26
 654:	b0 93 03 01 	sts	0x0103, r27
		break;
 658:	08 95       	ret
		case 3:	TCCR1B |= (DIVIDE_BY_64);
 65a:	e1 e8       	ldi	r30, 0x81	; 129
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	83 60       	ori	r24, 0x03	; 3
 662:	80 83       	st	Z, r24
		time_period = 4UL;
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	a0 e8       	ldi	r26, 0x80	; 128
 66a:	b0 e4       	ldi	r27, 0x40	; 64
 66c:	80 93 00 01 	sts	0x0100, r24
 670:	90 93 01 01 	sts	0x0101, r25
 674:	a0 93 02 01 	sts	0x0102, r26
 678:	b0 93 03 01 	sts	0x0103, r27
		break;
 67c:	08 95       	ret
		case 4:	TCCR1B |= (DIVIDE_BY_256);
 67e:	e1 e8       	ldi	r30, 0x81	; 129
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	84 60       	ori	r24, 0x04	; 4
 686:	80 83       	st	Z, r24
		time_period = 16UL;
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a0 e8       	ldi	r26, 0x80	; 128
 68e:	b1 e4       	ldi	r27, 0x41	; 65
 690:	80 93 00 01 	sts	0x0100, r24
 694:	90 93 01 01 	sts	0x0101, r25
 698:	a0 93 02 01 	sts	0x0102, r26
 69c:	b0 93 03 01 	sts	0x0103, r27
		break;
 6a0:	08 95       	ret
		case 0:
		case 5:	TCCR1B |= (DIVIDE_BY_1024);
 6a2:	e1 e8       	ldi	r30, 0x81	; 129
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	85 60       	ori	r24, 0x05	; 5
 6aa:	80 83       	st	Z, r24
		time_period = 64UL;
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	a0 e8       	ldi	r26, 0x80	; 128
 6b2:	b2 e4       	ldi	r27, 0x42	; 66
 6b4:	80 93 00 01 	sts	0x0100, r24
 6b8:	90 93 01 01 	sts	0x0101, r25
 6bc:	a0 93 02 01 	sts	0x0102, r26
 6c0:	b0 93 03 01 	sts	0x0103, r27
 6c4:	08 95       	ret

000006c6 <_Z9stopTimerv>:
	//TCCR1B  |= (DIVIDE_BY_256);
}

void stopTimer()
{
	TCCR1B &= ~0x07;
 6c6:	e1 e8       	ldi	r30, 0x81	; 129
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	88 7f       	andi	r24, 0xF8	; 248
 6ce:	80 83       	st	Z, r24
 6d0:	08 95       	ret

000006d2 <_Z9resetRCIOv>:
}


void resetRCIO()
{
	DDRD &= ~((1<<rcResistor_10P_TO_60U.pin) | (1<<rcResistor_1U_TO_6M.pin));	//initially reset state of Both Control IO's to HIZ
 6d2:	8a b1       	in	r24, 0x0a	; 10
 6d4:	87 7e       	andi	r24, 0xE7	; 231
 6d6:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<rcResistor_10P_TO_60U.pin) | (1<<rcResistor_1U_TO_6M.pin));
 6d8:	8b b1       	in	r24, 0x0b	; 11
 6da:	87 7e       	andi	r24, 0xE7	; 231
 6dc:	8b b9       	out	0x0b, r24	; 11
 6de:	08 95       	ret

000006e0 <_Z8chargeUpP10rcResistor>:
}

void chargeUp(rcResistor *resistor)
{
	DDRD |= (1<<resistor->pin);
 6e0:	6a b1       	in	r22, 0x0a	; 10
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	a9 01       	movw	r20, r18
 6e8:	fc 01       	movw	r30, r24
 6ea:	00 80       	ld	r0, Z
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_Z8chargeUpP10rcResistor+0x12>
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	0a 94       	dec	r0
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <_Z8chargeUpP10rcResistor+0xe>
 6f6:	46 2b       	or	r20, r22
 6f8:	4a b9       	out	0x0a, r20	; 10
	PORTD |= (1<<resistor->pin);
 6fa:	4b b1       	in	r20, 0x0b	; 11
 6fc:	00 80       	ld	r0, Z
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <_Z8chargeUpP10rcResistor+0x24>
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <_Z8chargeUpP10rcResistor+0x20>
 708:	24 2b       	or	r18, r20
 70a:	2b b9       	out	0x0b, r18	; 11
 70c:	08 95       	ret

0000070e <_Z11readVoltageh>:
	
}

uint16_t readVoltage(uint8_t channel)
{
	return ((adc_read(channel)*1100UL*VOLTAGE_DIVIDER)/1024UL);
 70e:	0e 94 bb 02 	call	0x576	; 0x576 <_Z8adc_readh>
 712:	9c 01       	movw	r18, r24
 714:	ac e4       	ldi	r26, 0x4C	; 76
 716:	b4 e0       	ldi	r27, 0x04	; 4
 718:	0e 94 65 07 	call	0xeca	; 0xeca <__umulhisi3>
 71c:	dc 01       	movw	r26, r24
 71e:	cb 01       	movw	r24, r22
 720:	07 2e       	mov	r0, r23
 722:	7a e0       	ldi	r23, 0x0A	; 10
 724:	b6 95       	lsr	r27
 726:	a7 95       	ror	r26
 728:	97 95       	ror	r25
 72a:	87 95       	ror	r24
 72c:	7a 95       	dec	r23
 72e:	d1 f7       	brne	.-12     	; 0x724 <_Z11readVoltageh+0x16>
 730:	70 2d       	mov	r23, r0
}
 732:	08 95       	ret

00000734 <_Z9disChargehj>:
{
	return ICR1;
}

void disCharge(uint8_t pin, uint16_t mV_to_wait_for)
{
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	18 2f       	mov	r17, r24
 73c:	eb 01       	movw	r28, r22
	adc_init();
 73e:	0e 94 b4 02 	call	0x568	; 0x568 <_Z8adc_initv>
	DDRD |= (1<<pin);
 742:	4a b1       	in	r20, 0x0a	; 10
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	c9 01       	movw	r24, r18
 74a:	02 c0       	rjmp	.+4      	; 0x750 <_Z9disChargehj+0x1c>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	1a 95       	dec	r17
 752:	e2 f7       	brpl	.-8      	; 0x74c <_Z9disChargehj+0x18>
 754:	94 2f       	mov	r25, r20
 756:	98 2b       	or	r25, r24
 758:	9a b9       	out	0x0a, r25	; 10
	PORTD &= ~(1<<pin); //warning don't use values below 220Ohm for pull down can damage GPIO.
 75a:	9b b1       	in	r25, 0x0b	; 11
 75c:	18 2f       	mov	r17, r24
 75e:	10 95       	com	r17
 760:	81 2f       	mov	r24, r17
 762:	89 23       	and	r24, r25
 764:	8b b9       	out	0x0b, r24	; 11
	while(!(readVoltage(0) <= mV_to_wait_for));
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 87 03 	call	0x70e	; 0x70e <_Z11readVoltageh>
 76c:	c8 17       	cp	r28, r24
 76e:	d9 07       	cpc	r29, r25
 770:	d0 f3       	brcs	.-12     	; 0x766 <_Z9disChargehj+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 772:	2f ef       	ldi	r18, 0xFF	; 255
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	21 50       	subi	r18, 0x01	; 1
 77a:	80 40       	sbci	r24, 0x00	; 0
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <_Z9disChargehj+0x44>
 780:	00 c0       	rjmp	.+0      	; 0x782 <_Z9disChargehj+0x4e>
 782:	00 00       	nop
						//for atleast 4.7uF.
						
						//only for around 100uf and higher the above wait statement would make some sense.
						//anyway we will keep it.
						
	DDRD &= ~(1<<pin);		//make the discharge resistor pin HiZ again.
 784:	8a b1       	in	r24, 0x0a	; 10
 786:	18 23       	and	r17, r24
 788:	1a b9       	out	0x0a, r17	; 10
}
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	08 95       	ret

00000792 <_Z7preparehP10rcResistor>:
	DDRD |= (1<<resistor->pin);
	PORTD |= (1<<resistor->pin);
}

uint8_t prepare(uint8_t timerSpeed, rcResistor *resistor)
{
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	18 2f       	mov	r17, r24
 79c:	eb 01       	movw	r28, r22
	stopTimer();
 79e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z9stopTimerv>
	
	
//	DDRD |= (1<<resistor->pin);		//set the GPIO pin as OUPUT
//	PORTD &= ~(1<<resistor->pin);
	
	resetRCIO();
 7a2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z9resetRCIOv>
	disCharge(DISCHARGE_RESISTOR_PIN,50);	//wait until voltage on CAP less than 50mV(decrease value for accuracy), channel 0 is also the VIN- of ACO
 7a6:	62 e3       	ldi	r22, 0x32	; 50
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	0e 94 9a 03 	call	0x734	; 0x734 <_Z9disChargehj>
									
									//or we can just simply keep an option in the software to switch which ever we want and 
									//at a command we will be able to switch, any how if we are building a multimeter we will definitely
									//have switches or some interface to select what to measure so we can keep some interfacing option
									//to toggle range.
	configure_AnalogComparator();
 7b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z26configure_AnalogComparatorv>
	configure_Timer_and_ICP();
 7b4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_Z23configure_Timer_and_ICPv>
	TCCR1B &= ~0x07;
}

void resetTimer()
{
	TCNT1 = 0;	
 7b8:	10 92 85 00 	sts	0x0085, r1
 7bc:	10 92 84 00 	sts	0x0084, r1
	configure_AnalogComparator();
	configure_Timer_and_ICP();
	resetTimer();
	
	//PORTD |= (1<<resistor->pin);
	chargeUp(resistor);
 7c0:	ce 01       	movw	r24, r28
 7c2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_Z8chargeUpP10rcResistor>

	startTimer(timerSpeed);
 7c6:	81 2f       	mov	r24, r17
 7c8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z10startTimerh>
	while(!(TIFR1 & (1<<ICF1)))	//wait until ICF1 flag is set.
 7cc:	25 c0       	rjmp	.+74     	; 0x818 <_Z7preparehP10rcResistor+0x86>
	{
		if(TIFR1 & (1<<TOV1))	//if timer has overflown before an Input capture has been registered
 7ce:	b0 9b       	sbis	0x16, 0	; 22
 7d0:	23 c0       	rjmp	.+70     	; 0x818 <_Z7preparehP10rcResistor+0x86>
		{						//increase time period and restart function.
			//timerSpeed = (++timerSpeed)/TIMER_MIN_SPEED; //this statement doesn't work, C compiler unable to understand, so I wrote it below like this
			TIFR1 |= (1<<TOV1); //clear timer overflow flag first
 7d2:	b0 9a       	sbi	0x16, 0	; 22
			timerSpeed = (timerSpeed+1)%TIMER_MIN_SPEED;
 7d4:	81 2f       	mov	r24, r17
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	65 e0       	ldi	r22, 0x05	; 5
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodhi4>
 7e2:	18 2f       	mov	r17, r24
			
			u_print("Resistor = ");
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
			uart_printnum(resistor->pin);
 7ec:	68 81       	ld	r22, Y
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 43 01 	call	0x286	; 0x286 <_Z13uart_printnuml>
			u_print(" timer_speed = ");
 7f8:	82 e1       	ldi	r24, 0x12	; 18
 7fa:	91 e0       	ldi	r25, 0x01	; 1
 7fc:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
			uart_printnum(timerSpeed);
 800:	61 2f       	mov	r22, r17
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 43 01 	call	0x286	; 0x286 <_Z13uart_printnuml>
			u_print("\r\n");
 80c:	8a e4       	ldi	r24, 0x4A	; 74
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
			
			return timerSpeed;
 814:	81 2f       	mov	r24, r17
 816:	05 c0       	rjmp	.+10     	; 0x822 <_Z7preparehP10rcResistor+0x90>
	
	//PORTD |= (1<<resistor->pin);
	chargeUp(resistor);

	startTimer(timerSpeed);
	while(!(TIFR1 & (1<<ICF1)))	//wait until ICF1 flag is set.
 818:	b5 9b       	sbis	0x16, 5	; 22
 81a:	d9 cf       	rjmp	.-78     	; 0x7ce <_Z7preparehP10rcResistor+0x3c>
	}
	//now if you want to print timer speed data you have to put the print statement here because this function will always returns 
	//a value of TIMER_MIN_SPEED+1 when it was successful, if not successful then it will return timer value, but in that case
	//the do{}while() loop will not let the control go any further.
	
	stopTimer();
 81c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z9stopTimerv>
	
	return TIMER_MIN_SPEED+1; //return a value which outside of the range of value that can be returned above, so we can find out return was from
 820:	86 e0       	ldi	r24, 0x06	; 6
								//Timer overflow or natural.
}
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	08 95       	ret

0000082c <_Z20calculateCapacitancev>:

void calculateCapacitance()
{
 82c:	8f 92       	push	r8
 82e:	9f 92       	push	r9
 830:	af 92       	push	r10
 832:	bf 92       	push	r11
 834:	cf 92       	push	r12
 836:	df 92       	push	r13
 838:	ef 92       	push	r14
 83a:	ff 92       	push	r15
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	00 d0       	rcall	.+0      	; 0x846 <_Z20calculateCapacitancev+0x1a>
 846:	00 d0       	rcall	.+0      	; 0x848 <_Z20calculateCapacitancev+0x1c>
 848:	1f 92       	push	r1
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
	uint8_t timerSpeed = TIMER_MAX_SPEED;
	
	rcResistor resistor = rcResistor_10P_TO_60U;
 84e:	85 e0       	ldi	r24, 0x05	; 5
 850:	e2 e5       	ldi	r30, 0x52	; 82
 852:	f1 e0       	ldi	r31, 0x01	; 1
 854:	de 01       	movw	r26, r28
 856:	11 96       	adiw	r26, 0x01	; 1
 858:	01 90       	ld	r0, Z+
 85a:	0d 92       	st	X+, r0
 85c:	8a 95       	dec	r24
 85e:	e1 f7       	brne	.-8      	; 0x858 <_Z20calculateCapacitancev+0x2c>
								//Timer overflow or natural.
}

void calculateCapacitance()
{
	uint8_t timerSpeed = TIMER_MAX_SPEED;
 860:	81 e0       	ldi	r24, 0x01	; 1
		if(timerSpeed==0 && resistor.pin == rcResistor_10P_TO_60U.pin)
		{
		//	DDRD &= ~(1<<rcResistor_10P_TO_60U.pin);		//NOW we know that for range of 10p to 60u timer overflowed 
		//	PORTD &= ~(1<<rcResistor_10P_TO_60U.pin);		//so we are now going to HiZ the Control IO  for 10p to 60U and
		//taken care in prepare() now
			resistor = rcResistor_1U_TO_6M;
 862:	05 e0       	ldi	r16, 0x05	; 5
			timerSpeed = TIMER_MAX_SPEED;				//turn the Control IO on for 1U to 6M
 864:	11 e0       	ldi	r17, 0x01	; 1
	rcResistor resistor = rcResistor_10P_TO_60U;
	
	do
	{
		
		timerSpeed = prepare(timerSpeed, &resistor);
 866:	be 01       	movw	r22, r28
 868:	6f 5f       	subi	r22, 0xFF	; 255
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	0e 94 c9 03 	call	0x792	; 0x792 <_Z7preparehP10rcResistor>
		
		if(timerSpeed==0 && resistor.pin == rcResistor_10P_TO_60U.pin)
 870:	81 11       	cpse	r24, r1
 872:	0e c0       	rjmp	.+28     	; 0x890 <_Z20calculateCapacitancev+0x64>
 874:	99 81       	ldd	r25, Y+1	; 0x01
 876:	94 30       	cpi	r25, 0x04	; 4
 878:	b1 f7       	brne	.-20     	; 0x866 <_Z20calculateCapacitancev+0x3a>
		{
		//	DDRD &= ~(1<<rcResistor_10P_TO_60U.pin);		//NOW we know that for range of 10p to 60u timer overflowed 
		//	PORTD &= ~(1<<rcResistor_10P_TO_60U.pin);		//so we are now going to HiZ the Control IO  for 10p to 60U and
		//taken care in prepare() now
			resistor = rcResistor_1U_TO_6M;
 87a:	ed e4       	ldi	r30, 0x4D	; 77
 87c:	f1 e0       	ldi	r31, 0x01	; 1
 87e:	de 01       	movw	r26, r28
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	80 2f       	mov	r24, r16
 884:	01 90       	ld	r0, Z+
 886:	0d 92       	st	X+, r0
 888:	8a 95       	dec	r24
 88a:	e1 f7       	brne	.-8      	; 0x884 <_Z20calculateCapacitancev+0x58>
			timerSpeed = TIMER_MAX_SPEED;				//turn the Control IO on for 1U to 6M
 88c:	81 2f       	mov	r24, r17
 88e:	eb cf       	rjmp	.-42     	; 0x866 <_Z20calculateCapacitancev+0x3a>
{
	uint8_t timerSpeed = TIMER_MAX_SPEED;
	
	rcResistor resistor = rcResistor_10P_TO_60U;
	
	do
 890:	86 30       	cpi	r24, 0x06	; 6
 892:	49 f7       	brne	.-46     	; 0x866 <_Z20calculateCapacitancev+0x3a>
	TCNT1 = 0;	
}

uint16_t readICPdata()
{
	return ICR1;
 894:	80 90 86 00 	lds	r8, 0x0086
 898:	90 90 87 00 	lds	r9, 0x0087
	//1000000000 * 0.5us = 1000 * 0.5s, i multiplied 1000000000 to get cap value in nanofarad.
	//timing * 0.5us is our actual time, since ICP data only contains number of clocks with a period of 0.5us went in.
	//100Ul * 5UL/0.7
	//10UL*5UL/7UL
	
	uint32_t capacitance = (1000000UL * time_period * timing)/(0.7 * resistor.value); 
 89c:	20 e0       	ldi	r18, 0x00	; 0
 89e:	34 e2       	ldi	r19, 0x24	; 36
 8a0:	44 e7       	ldi	r20, 0x74	; 116
 8a2:	59 e4       	ldi	r21, 0x49	; 73
 8a4:	60 91 00 01 	lds	r22, 0x0100
 8a8:	70 91 01 01 	lds	r23, 0x0101
 8ac:	80 91 02 01 	lds	r24, 0x0102
 8b0:	90 91 03 01 	lds	r25, 0x0103
 8b4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__mulsf3>
 8b8:	6b 01       	movw	r12, r22
 8ba:	7c 01       	movw	r14, r24
 8bc:	a1 2c       	mov	r10, r1
 8be:	b1 2c       	mov	r11, r1
 8c0:	c5 01       	movw	r24, r10
 8c2:	b4 01       	movw	r22, r8
 8c4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatunsisf>
 8c8:	9b 01       	movw	r18, r22
 8ca:	ac 01       	movw	r20, r24
 8cc:	c7 01       	movw	r24, r14
 8ce:	b6 01       	movw	r22, r12
 8d0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__mulsf3>
 8d4:	6b 01       	movw	r12, r22
 8d6:	7c 01       	movw	r14, r24
 8d8:	6a 81       	ldd	r22, Y+2	; 0x02
 8da:	7b 81       	ldd	r23, Y+3	; 0x03
 8dc:	8c 81       	ldd	r24, Y+4	; 0x04
 8de:	9d 81       	ldd	r25, Y+5	; 0x05
 8e0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatunsisf>
 8e4:	23 e3       	ldi	r18, 0x33	; 51
 8e6:	33 e3       	ldi	r19, 0x33	; 51
 8e8:	43 e3       	ldi	r20, 0x33	; 51
 8ea:	5f e3       	ldi	r21, 0x3F	; 63
 8ec:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__mulsf3>
 8f0:	9b 01       	movw	r18, r22
 8f2:	ac 01       	movw	r20, r24
 8f4:	c7 01       	movw	r24, r14
 8f6:	b6 01       	movw	r22, r12
 8f8:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 8fc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixunssfsi>
 900:	6b 01       	movw	r12, r22
 902:	7c 01       	movw	r14, r24
	u_print("timing=");
 904:	82 e2       	ldi	r24, 0x22	; 34
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
	uart_printnum(timing);
 90c:	c5 01       	movw	r24, r10
 90e:	b4 01       	movw	r22, r8
 910:	0e 94 43 01 	call	0x286	; 0x286 <_Z13uart_printnuml>
	u_print("  ");
 914:	8a e2       	ldi	r24, 0x2A	; 42
 916:	91 e0       	ldi	r25, 0x01	; 1
 918:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
	u_print("capacitance=");
 91c:	8d e2       	ldi	r24, 0x2D	; 45
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
	uart_printnum(capacitance);
 924:	c7 01       	movw	r24, r14
 926:	b6 01       	movw	r22, r12
 928:	0e 94 43 01 	call	0x286	; 0x286 <_Z13uart_printnuml>
	u_print("pF or ");
 92c:	8a e3       	ldi	r24, 0x3A	; 58
 92e:	91 e0       	ldi	r25, 0x01	; 1
 930:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
	uart_printnum(capacitance/1000UL);
 934:	c7 01       	movw	r24, r14
 936:	b6 01       	movw	r22, r12
 938:	28 ee       	ldi	r18, 0xE8	; 232
 93a:	33 e0       	ldi	r19, 0x03	; 3
 93c:	40 e0       	ldi	r20, 0x00	; 0
 93e:	50 e0       	ldi	r21, 0x00	; 0
 940:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 944:	ca 01       	movw	r24, r20
 946:	b9 01       	movw	r22, r18
 948:	0e 94 43 01 	call	0x286	; 0x286 <_Z13uart_printnuml>
	u_print("nF or ");
 94c:	81 e4       	ldi	r24, 0x41	; 65
 94e:	91 e0       	ldi	r25, 0x01	; 1
 950:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
	uart_printFloat((float)capacitance/1000000UL,3);
 954:	1f 92       	push	r1
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	8f 93       	push	r24
 95a:	c7 01       	movw	r24, r14
 95c:	b6 01       	movw	r22, r12
 95e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatunsisf>
 962:	20 e0       	ldi	r18, 0x00	; 0
 964:	34 e2       	ldi	r19, 0x24	; 36
 966:	44 e7       	ldi	r20, 0x74	; 116
 968:	59 e4       	ldi	r21, 0x49	; 73
 96a:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 96e:	9f 93       	push	r25
 970:	8f 93       	push	r24
 972:	7f 93       	push	r23
 974:	6f 93       	push	r22
 976:	0e 94 9b 02 	call	0x536	; 0x536 <_Z15uart_printFloatfz>
	u_print("uF\r\n");
 97a:	88 e4       	ldi	r24, 0x48	; 72
 97c:	91 e0       	ldi	r25, 0x01	; 1
 97e:	0e 94 1a 01 	call	0x234	; 0x234 <_Z7u_printPKc>
//	u_print("timer_speed = ");
//	uart_printnum(timerSpeed);
//	u_print("\r\n");
	
}
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	0f 90       	pop	r0
 992:	0f 90       	pop	r0
 994:	0f 90       	pop	r0
 996:	0f 90       	pop	r0
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	ff 90       	pop	r15
 9a2:	ef 90       	pop	r14
 9a4:	df 90       	pop	r13
 9a6:	cf 90       	pop	r12
 9a8:	bf 90       	pop	r11
 9aa:	af 90       	pop	r10
 9ac:	9f 90       	pop	r9
 9ae:	8f 90       	pop	r8
 9b0:	08 95       	ret

000009b2 <main>:
float time_period=2;


int main(void)
{
	uart_init(9600);
 9b2:	60 e8       	ldi	r22, 0x80	; 128
 9b4:	75 e2       	ldi	r23, 0x25	; 37
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z9uart_initm>
	u_printPMEM("Board Initialized\r\n");
 9be:	88 e6       	ldi	r24, 0x68	; 104
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z9u_print_pPKc>
	adc_init();
 9c6:	0e 94 b4 02 	call	0x568	; 0x568 <_Z8adc_initv>
	
	DDRB |= (1<<5);
 9ca:	25 9a       	sbi	0x04, 5	; 4
	
	//initially set all RC_RESISTORS as INPUT LOW, so that both resistors are not active same time ever.
	DDRD &= ~((1<<RC_RESISTOR_1_PIN) | (1<<RC_RESISTOR_2_PIN));
 9cc:	8a b1       	in	r24, 0x0a	; 10
 9ce:	87 7e       	andi	r24, 0xE7	; 231
 9d0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<RC_RESISTOR_1_PIN) | (1<<RC_RESISTOR_2_PIN));
 9d2:	8b b1       	in	r24, 0x0b	; 11
 9d4:	87 7e       	andi	r24, 0xE7	; 231
 9d6:	8b b9       	out	0x0b, r24	; 11
		*/
		/*
		uart_printFloat(34.45896,3);
		u_print("\r\n");
		*/
		calculateCapacitance();
 9d8:	0e 94 16 04 	call	0x82c	; 0x82c <_Z20calculateCapacitancev>
 9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <main+0x26>

000009de <__vector_10>:
{
	return ((adc_read(channel)*1100UL*VOLTAGE_DIVIDER)/1024UL);
}

ISR(TIMER1_CAPT_vect)
{
 9de:	1f 92       	push	r1
 9e0:	0f 92       	push	r0
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	0f 92       	push	r0
 9e6:	11 24       	eor	r1, r1
	
}
 9e8:	0f 90       	pop	r0
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	0f 90       	pop	r0
 9ee:	1f 90       	pop	r1
 9f0:	18 95       	reti

000009f2 <__subsf3>:
 9f2:	50 58       	subi	r21, 0x80	; 128

000009f4 <__addsf3>:
 9f4:	bb 27       	eor	r27, r27
 9f6:	aa 27       	eor	r26, r26
 9f8:	0e d0       	rcall	.+28     	; 0xa16 <__addsf3x>
 9fa:	75 c1       	rjmp	.+746    	; 0xce6 <__fp_round>
 9fc:	66 d1       	rcall	.+716    	; 0xcca <__fp_pscA>
 9fe:	30 f0       	brcs	.+12     	; 0xa0c <__addsf3+0x18>
 a00:	6b d1       	rcall	.+726    	; 0xcd8 <__fp_pscB>
 a02:	20 f0       	brcs	.+8      	; 0xa0c <__addsf3+0x18>
 a04:	31 f4       	brne	.+12     	; 0xa12 <__addsf3+0x1e>
 a06:	9f 3f       	cpi	r25, 0xFF	; 255
 a08:	11 f4       	brne	.+4      	; 0xa0e <__addsf3+0x1a>
 a0a:	1e f4       	brtc	.+6      	; 0xa12 <__addsf3+0x1e>
 a0c:	5b c1       	rjmp	.+694    	; 0xcc4 <__fp_nan>
 a0e:	0e f4       	brtc	.+2      	; 0xa12 <__addsf3+0x1e>
 a10:	e0 95       	com	r30
 a12:	e7 fb       	bst	r30, 7
 a14:	51 c1       	rjmp	.+674    	; 0xcb8 <__fp_inf>

00000a16 <__addsf3x>:
 a16:	e9 2f       	mov	r30, r25
 a18:	77 d1       	rcall	.+750    	; 0xd08 <__fp_split3>
 a1a:	80 f3       	brcs	.-32     	; 0x9fc <__addsf3+0x8>
 a1c:	ba 17       	cp	r27, r26
 a1e:	62 07       	cpc	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	95 07       	cpc	r25, r21
 a26:	18 f0       	brcs	.+6      	; 0xa2e <__addsf3x+0x18>
 a28:	71 f4       	brne	.+28     	; 0xa46 <__addsf3x+0x30>
 a2a:	9e f5       	brtc	.+102    	; 0xa92 <__addsf3x+0x7c>
 a2c:	8f c1       	rjmp	.+798    	; 0xd4c <__fp_zero>
 a2e:	0e f4       	brtc	.+2      	; 0xa32 <__addsf3x+0x1c>
 a30:	e0 95       	com	r30
 a32:	0b 2e       	mov	r0, r27
 a34:	ba 2f       	mov	r27, r26
 a36:	a0 2d       	mov	r26, r0
 a38:	0b 01       	movw	r0, r22
 a3a:	b9 01       	movw	r22, r18
 a3c:	90 01       	movw	r18, r0
 a3e:	0c 01       	movw	r0, r24
 a40:	ca 01       	movw	r24, r20
 a42:	a0 01       	movw	r20, r0
 a44:	11 24       	eor	r1, r1
 a46:	ff 27       	eor	r31, r31
 a48:	59 1b       	sub	r21, r25
 a4a:	99 f0       	breq	.+38     	; 0xa72 <__addsf3x+0x5c>
 a4c:	59 3f       	cpi	r21, 0xF9	; 249
 a4e:	50 f4       	brcc	.+20     	; 0xa64 <__addsf3x+0x4e>
 a50:	50 3e       	cpi	r21, 0xE0	; 224
 a52:	68 f1       	brcs	.+90     	; 0xaae <__addsf3x+0x98>
 a54:	1a 16       	cp	r1, r26
 a56:	f0 40       	sbci	r31, 0x00	; 0
 a58:	a2 2f       	mov	r26, r18
 a5a:	23 2f       	mov	r18, r19
 a5c:	34 2f       	mov	r19, r20
 a5e:	44 27       	eor	r20, r20
 a60:	58 5f       	subi	r21, 0xF8	; 248
 a62:	f3 cf       	rjmp	.-26     	; 0xa4a <__addsf3x+0x34>
 a64:	46 95       	lsr	r20
 a66:	37 95       	ror	r19
 a68:	27 95       	ror	r18
 a6a:	a7 95       	ror	r26
 a6c:	f0 40       	sbci	r31, 0x00	; 0
 a6e:	53 95       	inc	r21
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__addsf3x+0x4e>
 a72:	7e f4       	brtc	.+30     	; 0xa92 <__addsf3x+0x7c>
 a74:	1f 16       	cp	r1, r31
 a76:	ba 0b       	sbc	r27, r26
 a78:	62 0b       	sbc	r22, r18
 a7a:	73 0b       	sbc	r23, r19
 a7c:	84 0b       	sbc	r24, r20
 a7e:	ba f0       	brmi	.+46     	; 0xaae <__addsf3x+0x98>
 a80:	91 50       	subi	r25, 0x01	; 1
 a82:	a1 f0       	breq	.+40     	; 0xaac <__addsf3x+0x96>
 a84:	ff 0f       	add	r31, r31
 a86:	bb 1f       	adc	r27, r27
 a88:	66 1f       	adc	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	c2 f7       	brpl	.-16     	; 0xa80 <__addsf3x+0x6a>
 a90:	0e c0       	rjmp	.+28     	; 0xaae <__addsf3x+0x98>
 a92:	ba 0f       	add	r27, r26
 a94:	62 1f       	adc	r22, r18
 a96:	73 1f       	adc	r23, r19
 a98:	84 1f       	adc	r24, r20
 a9a:	48 f4       	brcc	.+18     	; 0xaae <__addsf3x+0x98>
 a9c:	87 95       	ror	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	b7 95       	ror	r27
 aa4:	f7 95       	ror	r31
 aa6:	9e 3f       	cpi	r25, 0xFE	; 254
 aa8:	08 f0       	brcs	.+2      	; 0xaac <__addsf3x+0x96>
 aaa:	b3 cf       	rjmp	.-154    	; 0xa12 <__addsf3+0x1e>
 aac:	93 95       	inc	r25
 aae:	88 0f       	add	r24, r24
 ab0:	08 f0       	brcs	.+2      	; 0xab4 <__addsf3x+0x9e>
 ab2:	99 27       	eor	r25, r25
 ab4:	ee 0f       	add	r30, r30
 ab6:	97 95       	ror	r25
 ab8:	87 95       	ror	r24
 aba:	08 95       	ret

00000abc <__cmpsf2>:
 abc:	d9 d0       	rcall	.+434    	; 0xc70 <__fp_cmp>
 abe:	08 f4       	brcc	.+2      	; 0xac2 <__cmpsf2+0x6>
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	08 95       	ret

00000ac4 <__divsf3>:
 ac4:	0c d0       	rcall	.+24     	; 0xade <__divsf3x>
 ac6:	0f c1       	rjmp	.+542    	; 0xce6 <__fp_round>
 ac8:	07 d1       	rcall	.+526    	; 0xcd8 <__fp_pscB>
 aca:	40 f0       	brcs	.+16     	; 0xadc <__divsf3+0x18>
 acc:	fe d0       	rcall	.+508    	; 0xcca <__fp_pscA>
 ace:	30 f0       	brcs	.+12     	; 0xadc <__divsf3+0x18>
 ad0:	21 f4       	brne	.+8      	; 0xada <__divsf3+0x16>
 ad2:	5f 3f       	cpi	r21, 0xFF	; 255
 ad4:	19 f0       	breq	.+6      	; 0xadc <__divsf3+0x18>
 ad6:	f0 c0       	rjmp	.+480    	; 0xcb8 <__fp_inf>
 ad8:	51 11       	cpse	r21, r1
 ada:	39 c1       	rjmp	.+626    	; 0xd4e <__fp_szero>
 adc:	f3 c0       	rjmp	.+486    	; 0xcc4 <__fp_nan>

00000ade <__divsf3x>:
 ade:	14 d1       	rcall	.+552    	; 0xd08 <__fp_split3>
 ae0:	98 f3       	brcs	.-26     	; 0xac8 <__divsf3+0x4>

00000ae2 <__divsf3_pse>:
 ae2:	99 23       	and	r25, r25
 ae4:	c9 f3       	breq	.-14     	; 0xad8 <__divsf3+0x14>
 ae6:	55 23       	and	r21, r21
 ae8:	b1 f3       	breq	.-20     	; 0xad6 <__divsf3+0x12>
 aea:	95 1b       	sub	r25, r21
 aec:	55 0b       	sbc	r21, r21
 aee:	bb 27       	eor	r27, r27
 af0:	aa 27       	eor	r26, r26
 af2:	62 17       	cp	r22, r18
 af4:	73 07       	cpc	r23, r19
 af6:	84 07       	cpc	r24, r20
 af8:	38 f0       	brcs	.+14     	; 0xb08 <__divsf3_pse+0x26>
 afa:	9f 5f       	subi	r25, 0xFF	; 255
 afc:	5f 4f       	sbci	r21, 0xFF	; 255
 afe:	22 0f       	add	r18, r18
 b00:	33 1f       	adc	r19, r19
 b02:	44 1f       	adc	r20, r20
 b04:	aa 1f       	adc	r26, r26
 b06:	a9 f3       	breq	.-22     	; 0xaf2 <__divsf3_pse+0x10>
 b08:	33 d0       	rcall	.+102    	; 0xb70 <__divsf3_pse+0x8e>
 b0a:	0e 2e       	mov	r0, r30
 b0c:	3a f0       	brmi	.+14     	; 0xb1c <__divsf3_pse+0x3a>
 b0e:	e0 e8       	ldi	r30, 0x80	; 128
 b10:	30 d0       	rcall	.+96     	; 0xb72 <__divsf3_pse+0x90>
 b12:	91 50       	subi	r25, 0x01	; 1
 b14:	50 40       	sbci	r21, 0x00	; 0
 b16:	e6 95       	lsr	r30
 b18:	00 1c       	adc	r0, r0
 b1a:	ca f7       	brpl	.-14     	; 0xb0e <__divsf3_pse+0x2c>
 b1c:	29 d0       	rcall	.+82     	; 0xb70 <__divsf3_pse+0x8e>
 b1e:	fe 2f       	mov	r31, r30
 b20:	27 d0       	rcall	.+78     	; 0xb70 <__divsf3_pse+0x8e>
 b22:	66 0f       	add	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	bb 1f       	adc	r27, r27
 b2a:	26 17       	cp	r18, r22
 b2c:	37 07       	cpc	r19, r23
 b2e:	48 07       	cpc	r20, r24
 b30:	ab 07       	cpc	r26, r27
 b32:	b0 e8       	ldi	r27, 0x80	; 128
 b34:	09 f0       	breq	.+2      	; 0xb38 <__divsf3_pse+0x56>
 b36:	bb 0b       	sbc	r27, r27
 b38:	80 2d       	mov	r24, r0
 b3a:	bf 01       	movw	r22, r30
 b3c:	ff 27       	eor	r31, r31
 b3e:	93 58       	subi	r25, 0x83	; 131
 b40:	5f 4f       	sbci	r21, 0xFF	; 255
 b42:	2a f0       	brmi	.+10     	; 0xb4e <__divsf3_pse+0x6c>
 b44:	9e 3f       	cpi	r25, 0xFE	; 254
 b46:	51 05       	cpc	r21, r1
 b48:	68 f0       	brcs	.+26     	; 0xb64 <__divsf3_pse+0x82>
 b4a:	b6 c0       	rjmp	.+364    	; 0xcb8 <__fp_inf>
 b4c:	00 c1       	rjmp	.+512    	; 0xd4e <__fp_szero>
 b4e:	5f 3f       	cpi	r21, 0xFF	; 255
 b50:	ec f3       	brlt	.-6      	; 0xb4c <__divsf3_pse+0x6a>
 b52:	98 3e       	cpi	r25, 0xE8	; 232
 b54:	dc f3       	brlt	.-10     	; 0xb4c <__divsf3_pse+0x6a>
 b56:	86 95       	lsr	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	b7 95       	ror	r27
 b5e:	f7 95       	ror	r31
 b60:	9f 5f       	subi	r25, 0xFF	; 255
 b62:	c9 f7       	brne	.-14     	; 0xb56 <__divsf3_pse+0x74>
 b64:	88 0f       	add	r24, r24
 b66:	91 1d       	adc	r25, r1
 b68:	96 95       	lsr	r25
 b6a:	87 95       	ror	r24
 b6c:	97 f9       	bld	r25, 7
 b6e:	08 95       	ret
 b70:	e1 e0       	ldi	r30, 0x01	; 1
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	bb 1f       	adc	r27, r27
 b7a:	62 17       	cp	r22, r18
 b7c:	73 07       	cpc	r23, r19
 b7e:	84 07       	cpc	r24, r20
 b80:	ba 07       	cpc	r27, r26
 b82:	20 f0       	brcs	.+8      	; 0xb8c <__divsf3_pse+0xaa>
 b84:	62 1b       	sub	r22, r18
 b86:	73 0b       	sbc	r23, r19
 b88:	84 0b       	sbc	r24, r20
 b8a:	ba 0b       	sbc	r27, r26
 b8c:	ee 1f       	adc	r30, r30
 b8e:	88 f7       	brcc	.-30     	; 0xb72 <__divsf3_pse+0x90>
 b90:	e0 95       	com	r30
 b92:	08 95       	ret

00000b94 <__fixsfsi>:
 b94:	04 d0       	rcall	.+8      	; 0xb9e <__fixunssfsi>
 b96:	68 94       	set
 b98:	b1 11       	cpse	r27, r1
 b9a:	d9 c0       	rjmp	.+434    	; 0xd4e <__fp_szero>
 b9c:	08 95       	ret

00000b9e <__fixunssfsi>:
 b9e:	bc d0       	rcall	.+376    	; 0xd18 <__fp_splitA>
 ba0:	88 f0       	brcs	.+34     	; 0xbc4 <__fixunssfsi+0x26>
 ba2:	9f 57       	subi	r25, 0x7F	; 127
 ba4:	90 f0       	brcs	.+36     	; 0xbca <__fixunssfsi+0x2c>
 ba6:	b9 2f       	mov	r27, r25
 ba8:	99 27       	eor	r25, r25
 baa:	b7 51       	subi	r27, 0x17	; 23
 bac:	a0 f0       	brcs	.+40     	; 0xbd6 <__fixunssfsi+0x38>
 bae:	d1 f0       	breq	.+52     	; 0xbe4 <__fixunssfsi+0x46>
 bb0:	66 0f       	add	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	1a f0       	brmi	.+6      	; 0xbc0 <__fixunssfsi+0x22>
 bba:	ba 95       	dec	r27
 bbc:	c9 f7       	brne	.-14     	; 0xbb0 <__fixunssfsi+0x12>
 bbe:	12 c0       	rjmp	.+36     	; 0xbe4 <__fixunssfsi+0x46>
 bc0:	b1 30       	cpi	r27, 0x01	; 1
 bc2:	81 f0       	breq	.+32     	; 0xbe4 <__fixunssfsi+0x46>
 bc4:	c3 d0       	rcall	.+390    	; 0xd4c <__fp_zero>
 bc6:	b1 e0       	ldi	r27, 0x01	; 1
 bc8:	08 95       	ret
 bca:	c0 c0       	rjmp	.+384    	; 0xd4c <__fp_zero>
 bcc:	67 2f       	mov	r22, r23
 bce:	78 2f       	mov	r23, r24
 bd0:	88 27       	eor	r24, r24
 bd2:	b8 5f       	subi	r27, 0xF8	; 248
 bd4:	39 f0       	breq	.+14     	; 0xbe4 <__fixunssfsi+0x46>
 bd6:	b9 3f       	cpi	r27, 0xF9	; 249
 bd8:	cc f3       	brlt	.-14     	; 0xbcc <__fixunssfsi+0x2e>
 bda:	86 95       	lsr	r24
 bdc:	77 95       	ror	r23
 bde:	67 95       	ror	r22
 be0:	b3 95       	inc	r27
 be2:	d9 f7       	brne	.-10     	; 0xbda <__fixunssfsi+0x3c>
 be4:	3e f4       	brtc	.+14     	; 0xbf4 <__fixunssfsi+0x56>
 be6:	90 95       	com	r25
 be8:	80 95       	com	r24
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	08 95       	ret

00000bf6 <__floatunsisf>:
 bf6:	e8 94       	clt
 bf8:	09 c0       	rjmp	.+18     	; 0xc0c <__floatsisf+0x12>

00000bfa <__floatsisf>:
 bfa:	97 fb       	bst	r25, 7
 bfc:	3e f4       	brtc	.+14     	; 0xc0c <__floatsisf+0x12>
 bfe:	90 95       	com	r25
 c00:	80 95       	com	r24
 c02:	70 95       	com	r23
 c04:	61 95       	neg	r22
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	99 23       	and	r25, r25
 c0e:	a9 f0       	breq	.+42     	; 0xc3a <__floatsisf+0x40>
 c10:	f9 2f       	mov	r31, r25
 c12:	96 e9       	ldi	r25, 0x96	; 150
 c14:	bb 27       	eor	r27, r27
 c16:	93 95       	inc	r25
 c18:	f6 95       	lsr	r31
 c1a:	87 95       	ror	r24
 c1c:	77 95       	ror	r23
 c1e:	67 95       	ror	r22
 c20:	b7 95       	ror	r27
 c22:	f1 11       	cpse	r31, r1
 c24:	f8 cf       	rjmp	.-16     	; 0xc16 <__floatsisf+0x1c>
 c26:	fa f4       	brpl	.+62     	; 0xc66 <__floatsisf+0x6c>
 c28:	bb 0f       	add	r27, r27
 c2a:	11 f4       	brne	.+4      	; 0xc30 <__floatsisf+0x36>
 c2c:	60 ff       	sbrs	r22, 0
 c2e:	1b c0       	rjmp	.+54     	; 0xc66 <__floatsisf+0x6c>
 c30:	6f 5f       	subi	r22, 0xFF	; 255
 c32:	7f 4f       	sbci	r23, 0xFF	; 255
 c34:	8f 4f       	sbci	r24, 0xFF	; 255
 c36:	9f 4f       	sbci	r25, 0xFF	; 255
 c38:	16 c0       	rjmp	.+44     	; 0xc66 <__floatsisf+0x6c>
 c3a:	88 23       	and	r24, r24
 c3c:	11 f0       	breq	.+4      	; 0xc42 <__floatsisf+0x48>
 c3e:	96 e9       	ldi	r25, 0x96	; 150
 c40:	11 c0       	rjmp	.+34     	; 0xc64 <__floatsisf+0x6a>
 c42:	77 23       	and	r23, r23
 c44:	21 f0       	breq	.+8      	; 0xc4e <__floatsisf+0x54>
 c46:	9e e8       	ldi	r25, 0x8E	; 142
 c48:	87 2f       	mov	r24, r23
 c4a:	76 2f       	mov	r23, r22
 c4c:	05 c0       	rjmp	.+10     	; 0xc58 <__floatsisf+0x5e>
 c4e:	66 23       	and	r22, r22
 c50:	71 f0       	breq	.+28     	; 0xc6e <__floatsisf+0x74>
 c52:	96 e8       	ldi	r25, 0x86	; 134
 c54:	86 2f       	mov	r24, r22
 c56:	70 e0       	ldi	r23, 0x00	; 0
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	2a f0       	brmi	.+10     	; 0xc66 <__floatsisf+0x6c>
 c5c:	9a 95       	dec	r25
 c5e:	66 0f       	add	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	da f7       	brpl	.-10     	; 0xc5c <__floatsisf+0x62>
 c66:	88 0f       	add	r24, r24
 c68:	96 95       	lsr	r25
 c6a:	87 95       	ror	r24
 c6c:	97 f9       	bld	r25, 7
 c6e:	08 95       	ret

00000c70 <__fp_cmp>:
 c70:	99 0f       	add	r25, r25
 c72:	00 08       	sbc	r0, r0
 c74:	55 0f       	add	r21, r21
 c76:	aa 0b       	sbc	r26, r26
 c78:	e0 e8       	ldi	r30, 0x80	; 128
 c7a:	fe ef       	ldi	r31, 0xFE	; 254
 c7c:	16 16       	cp	r1, r22
 c7e:	17 06       	cpc	r1, r23
 c80:	e8 07       	cpc	r30, r24
 c82:	f9 07       	cpc	r31, r25
 c84:	c0 f0       	brcs	.+48     	; 0xcb6 <__fp_cmp+0x46>
 c86:	12 16       	cp	r1, r18
 c88:	13 06       	cpc	r1, r19
 c8a:	e4 07       	cpc	r30, r20
 c8c:	f5 07       	cpc	r31, r21
 c8e:	98 f0       	brcs	.+38     	; 0xcb6 <__fp_cmp+0x46>
 c90:	62 1b       	sub	r22, r18
 c92:	73 0b       	sbc	r23, r19
 c94:	84 0b       	sbc	r24, r20
 c96:	95 0b       	sbc	r25, r21
 c98:	39 f4       	brne	.+14     	; 0xca8 <__fp_cmp+0x38>
 c9a:	0a 26       	eor	r0, r26
 c9c:	61 f0       	breq	.+24     	; 0xcb6 <__fp_cmp+0x46>
 c9e:	23 2b       	or	r18, r19
 ca0:	24 2b       	or	r18, r20
 ca2:	25 2b       	or	r18, r21
 ca4:	21 f4       	brne	.+8      	; 0xcae <__fp_cmp+0x3e>
 ca6:	08 95       	ret
 ca8:	0a 26       	eor	r0, r26
 caa:	09 f4       	brne	.+2      	; 0xcae <__fp_cmp+0x3e>
 cac:	a1 40       	sbci	r26, 0x01	; 1
 cae:	a6 95       	lsr	r26
 cb0:	8f ef       	ldi	r24, 0xFF	; 255
 cb2:	81 1d       	adc	r24, r1
 cb4:	81 1d       	adc	r24, r1
 cb6:	08 95       	ret

00000cb8 <__fp_inf>:
 cb8:	97 f9       	bld	r25, 7
 cba:	9f 67       	ori	r25, 0x7F	; 127
 cbc:	80 e8       	ldi	r24, 0x80	; 128
 cbe:	70 e0       	ldi	r23, 0x00	; 0
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	08 95       	ret

00000cc4 <__fp_nan>:
 cc4:	9f ef       	ldi	r25, 0xFF	; 255
 cc6:	80 ec       	ldi	r24, 0xC0	; 192
 cc8:	08 95       	ret

00000cca <__fp_pscA>:
 cca:	00 24       	eor	r0, r0
 ccc:	0a 94       	dec	r0
 cce:	16 16       	cp	r1, r22
 cd0:	17 06       	cpc	r1, r23
 cd2:	18 06       	cpc	r1, r24
 cd4:	09 06       	cpc	r0, r25
 cd6:	08 95       	ret

00000cd8 <__fp_pscB>:
 cd8:	00 24       	eor	r0, r0
 cda:	0a 94       	dec	r0
 cdc:	12 16       	cp	r1, r18
 cde:	13 06       	cpc	r1, r19
 ce0:	14 06       	cpc	r1, r20
 ce2:	05 06       	cpc	r0, r21
 ce4:	08 95       	ret

00000ce6 <__fp_round>:
 ce6:	09 2e       	mov	r0, r25
 ce8:	03 94       	inc	r0
 cea:	00 0c       	add	r0, r0
 cec:	11 f4       	brne	.+4      	; 0xcf2 <__fp_round+0xc>
 cee:	88 23       	and	r24, r24
 cf0:	52 f0       	brmi	.+20     	; 0xd06 <__fp_round+0x20>
 cf2:	bb 0f       	add	r27, r27
 cf4:	40 f4       	brcc	.+16     	; 0xd06 <__fp_round+0x20>
 cf6:	bf 2b       	or	r27, r31
 cf8:	11 f4       	brne	.+4      	; 0xcfe <__fp_round+0x18>
 cfa:	60 ff       	sbrs	r22, 0
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <__fp_round+0x20>
 cfe:	6f 5f       	subi	r22, 0xFF	; 255
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	08 95       	ret

00000d08 <__fp_split3>:
 d08:	57 fd       	sbrc	r21, 7
 d0a:	90 58       	subi	r25, 0x80	; 128
 d0c:	44 0f       	add	r20, r20
 d0e:	55 1f       	adc	r21, r21
 d10:	59 f0       	breq	.+22     	; 0xd28 <__fp_splitA+0x10>
 d12:	5f 3f       	cpi	r21, 0xFF	; 255
 d14:	71 f0       	breq	.+28     	; 0xd32 <__fp_splitA+0x1a>
 d16:	47 95       	ror	r20

00000d18 <__fp_splitA>:
 d18:	88 0f       	add	r24, r24
 d1a:	97 fb       	bst	r25, 7
 d1c:	99 1f       	adc	r25, r25
 d1e:	61 f0       	breq	.+24     	; 0xd38 <__fp_splitA+0x20>
 d20:	9f 3f       	cpi	r25, 0xFF	; 255
 d22:	79 f0       	breq	.+30     	; 0xd42 <__fp_splitA+0x2a>
 d24:	87 95       	ror	r24
 d26:	08 95       	ret
 d28:	12 16       	cp	r1, r18
 d2a:	13 06       	cpc	r1, r19
 d2c:	14 06       	cpc	r1, r20
 d2e:	55 1f       	adc	r21, r21
 d30:	f2 cf       	rjmp	.-28     	; 0xd16 <__fp_split3+0xe>
 d32:	46 95       	lsr	r20
 d34:	f1 df       	rcall	.-30     	; 0xd18 <__fp_splitA>
 d36:	08 c0       	rjmp	.+16     	; 0xd48 <__fp_splitA+0x30>
 d38:	16 16       	cp	r1, r22
 d3a:	17 06       	cpc	r1, r23
 d3c:	18 06       	cpc	r1, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	f1 cf       	rjmp	.-30     	; 0xd24 <__fp_splitA+0xc>
 d42:	86 95       	lsr	r24
 d44:	71 05       	cpc	r23, r1
 d46:	61 05       	cpc	r22, r1
 d48:	08 94       	sec
 d4a:	08 95       	ret

00000d4c <__fp_zero>:
 d4c:	e8 94       	clt

00000d4e <__fp_szero>:
 d4e:	bb 27       	eor	r27, r27
 d50:	66 27       	eor	r22, r22
 d52:	77 27       	eor	r23, r23
 d54:	cb 01       	movw	r24, r22
 d56:	97 f9       	bld	r25, 7
 d58:	08 95       	ret

00000d5a <__mulsf3>:
 d5a:	0b d0       	rcall	.+22     	; 0xd72 <__mulsf3x>
 d5c:	c4 cf       	rjmp	.-120    	; 0xce6 <__fp_round>
 d5e:	b5 df       	rcall	.-150    	; 0xcca <__fp_pscA>
 d60:	28 f0       	brcs	.+10     	; 0xd6c <__mulsf3+0x12>
 d62:	ba df       	rcall	.-140    	; 0xcd8 <__fp_pscB>
 d64:	18 f0       	brcs	.+6      	; 0xd6c <__mulsf3+0x12>
 d66:	95 23       	and	r25, r21
 d68:	09 f0       	breq	.+2      	; 0xd6c <__mulsf3+0x12>
 d6a:	a6 cf       	rjmp	.-180    	; 0xcb8 <__fp_inf>
 d6c:	ab cf       	rjmp	.-170    	; 0xcc4 <__fp_nan>
 d6e:	11 24       	eor	r1, r1
 d70:	ee cf       	rjmp	.-36     	; 0xd4e <__fp_szero>

00000d72 <__mulsf3x>:
 d72:	ca df       	rcall	.-108    	; 0xd08 <__fp_split3>
 d74:	a0 f3       	brcs	.-24     	; 0xd5e <__mulsf3+0x4>

00000d76 <__mulsf3_pse>:
 d76:	95 9f       	mul	r25, r21
 d78:	d1 f3       	breq	.-12     	; 0xd6e <__mulsf3+0x14>
 d7a:	95 0f       	add	r25, r21
 d7c:	50 e0       	ldi	r21, 0x00	; 0
 d7e:	55 1f       	adc	r21, r21
 d80:	62 9f       	mul	r22, r18
 d82:	f0 01       	movw	r30, r0
 d84:	72 9f       	mul	r23, r18
 d86:	bb 27       	eor	r27, r27
 d88:	f0 0d       	add	r31, r0
 d8a:	b1 1d       	adc	r27, r1
 d8c:	63 9f       	mul	r22, r19
 d8e:	aa 27       	eor	r26, r26
 d90:	f0 0d       	add	r31, r0
 d92:	b1 1d       	adc	r27, r1
 d94:	aa 1f       	adc	r26, r26
 d96:	64 9f       	mul	r22, r20
 d98:	66 27       	eor	r22, r22
 d9a:	b0 0d       	add	r27, r0
 d9c:	a1 1d       	adc	r26, r1
 d9e:	66 1f       	adc	r22, r22
 da0:	82 9f       	mul	r24, r18
 da2:	22 27       	eor	r18, r18
 da4:	b0 0d       	add	r27, r0
 da6:	a1 1d       	adc	r26, r1
 da8:	62 1f       	adc	r22, r18
 daa:	73 9f       	mul	r23, r19
 dac:	b0 0d       	add	r27, r0
 dae:	a1 1d       	adc	r26, r1
 db0:	62 1f       	adc	r22, r18
 db2:	83 9f       	mul	r24, r19
 db4:	a0 0d       	add	r26, r0
 db6:	61 1d       	adc	r22, r1
 db8:	22 1f       	adc	r18, r18
 dba:	74 9f       	mul	r23, r20
 dbc:	33 27       	eor	r19, r19
 dbe:	a0 0d       	add	r26, r0
 dc0:	61 1d       	adc	r22, r1
 dc2:	23 1f       	adc	r18, r19
 dc4:	84 9f       	mul	r24, r20
 dc6:	60 0d       	add	r22, r0
 dc8:	21 1d       	adc	r18, r1
 dca:	82 2f       	mov	r24, r18
 dcc:	76 2f       	mov	r23, r22
 dce:	6a 2f       	mov	r22, r26
 dd0:	11 24       	eor	r1, r1
 dd2:	9f 57       	subi	r25, 0x7F	; 127
 dd4:	50 40       	sbci	r21, 0x00	; 0
 dd6:	8a f0       	brmi	.+34     	; 0xdfa <__mulsf3_pse+0x84>
 dd8:	e1 f0       	breq	.+56     	; 0xe12 <__mulsf3_pse+0x9c>
 dda:	88 23       	and	r24, r24
 ddc:	4a f0       	brmi	.+18     	; 0xdf0 <__mulsf3_pse+0x7a>
 dde:	ee 0f       	add	r30, r30
 de0:	ff 1f       	adc	r31, r31
 de2:	bb 1f       	adc	r27, r27
 de4:	66 1f       	adc	r22, r22
 de6:	77 1f       	adc	r23, r23
 de8:	88 1f       	adc	r24, r24
 dea:	91 50       	subi	r25, 0x01	; 1
 dec:	50 40       	sbci	r21, 0x00	; 0
 dee:	a9 f7       	brne	.-22     	; 0xdda <__mulsf3_pse+0x64>
 df0:	9e 3f       	cpi	r25, 0xFE	; 254
 df2:	51 05       	cpc	r21, r1
 df4:	70 f0       	brcs	.+28     	; 0xe12 <__mulsf3_pse+0x9c>
 df6:	60 cf       	rjmp	.-320    	; 0xcb8 <__fp_inf>
 df8:	aa cf       	rjmp	.-172    	; 0xd4e <__fp_szero>
 dfa:	5f 3f       	cpi	r21, 0xFF	; 255
 dfc:	ec f3       	brlt	.-6      	; 0xdf8 <__mulsf3_pse+0x82>
 dfe:	98 3e       	cpi	r25, 0xE8	; 232
 e00:	dc f3       	brlt	.-10     	; 0xdf8 <__mulsf3_pse+0x82>
 e02:	86 95       	lsr	r24
 e04:	77 95       	ror	r23
 e06:	67 95       	ror	r22
 e08:	b7 95       	ror	r27
 e0a:	f7 95       	ror	r31
 e0c:	e7 95       	ror	r30
 e0e:	9f 5f       	subi	r25, 0xFF	; 255
 e10:	c1 f7       	brne	.-16     	; 0xe02 <__mulsf3_pse+0x8c>
 e12:	fe 2b       	or	r31, r30
 e14:	88 0f       	add	r24, r24
 e16:	91 1d       	adc	r25, r1
 e18:	96 95       	lsr	r25
 e1a:	87 95       	ror	r24
 e1c:	97 f9       	bld	r25, 7
 e1e:	08 95       	ret

00000e20 <__divmodhi4>:
 e20:	97 fb       	bst	r25, 7
 e22:	07 2e       	mov	r0, r23
 e24:	16 f4       	brtc	.+4      	; 0xe2a <__divmodhi4+0xa>
 e26:	00 94       	com	r0
 e28:	07 d0       	rcall	.+14     	; 0xe38 <__divmodhi4_neg1>
 e2a:	77 fd       	sbrc	r23, 7
 e2c:	09 d0       	rcall	.+18     	; 0xe40 <__divmodhi4_neg2>
 e2e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__udivmodhi4>
 e32:	07 fc       	sbrc	r0, 7
 e34:	05 d0       	rcall	.+10     	; 0xe40 <__divmodhi4_neg2>
 e36:	3e f4       	brtc	.+14     	; 0xe46 <__divmodhi4_exit>

00000e38 <__divmodhi4_neg1>:
 e38:	90 95       	com	r25
 e3a:	81 95       	neg	r24
 e3c:	9f 4f       	sbci	r25, 0xFF	; 255
 e3e:	08 95       	ret

00000e40 <__divmodhi4_neg2>:
 e40:	70 95       	com	r23
 e42:	61 95       	neg	r22
 e44:	7f 4f       	sbci	r23, 0xFF	; 255

00000e46 <__divmodhi4_exit>:
 e46:	08 95       	ret

00000e48 <__udivmodsi4>:
 e48:	a1 e2       	ldi	r26, 0x21	; 33
 e4a:	1a 2e       	mov	r1, r26
 e4c:	aa 1b       	sub	r26, r26
 e4e:	bb 1b       	sub	r27, r27
 e50:	fd 01       	movw	r30, r26
 e52:	0d c0       	rjmp	.+26     	; 0xe6e <__udivmodsi4_ep>

00000e54 <__udivmodsi4_loop>:
 e54:	aa 1f       	adc	r26, r26
 e56:	bb 1f       	adc	r27, r27
 e58:	ee 1f       	adc	r30, r30
 e5a:	ff 1f       	adc	r31, r31
 e5c:	a2 17       	cp	r26, r18
 e5e:	b3 07       	cpc	r27, r19
 e60:	e4 07       	cpc	r30, r20
 e62:	f5 07       	cpc	r31, r21
 e64:	20 f0       	brcs	.+8      	; 0xe6e <__udivmodsi4_ep>
 e66:	a2 1b       	sub	r26, r18
 e68:	b3 0b       	sbc	r27, r19
 e6a:	e4 0b       	sbc	r30, r20
 e6c:	f5 0b       	sbc	r31, r21

00000e6e <__udivmodsi4_ep>:
 e6e:	66 1f       	adc	r22, r22
 e70:	77 1f       	adc	r23, r23
 e72:	88 1f       	adc	r24, r24
 e74:	99 1f       	adc	r25, r25
 e76:	1a 94       	dec	r1
 e78:	69 f7       	brne	.-38     	; 0xe54 <__udivmodsi4_loop>
 e7a:	60 95       	com	r22
 e7c:	70 95       	com	r23
 e7e:	80 95       	com	r24
 e80:	90 95       	com	r25
 e82:	9b 01       	movw	r18, r22
 e84:	ac 01       	movw	r20, r24
 e86:	bd 01       	movw	r22, r26
 e88:	cf 01       	movw	r24, r30
 e8a:	08 95       	ret

00000e8c <__divmodsi4>:
 e8c:	05 2e       	mov	r0, r21
 e8e:	97 fb       	bst	r25, 7
 e90:	1e f4       	brtc	.+6      	; 0xe98 <__divmodsi4+0xc>
 e92:	00 94       	com	r0
 e94:	0e 94 5d 07 	call	0xeba	; 0xeba <__negsi2>
 e98:	57 fd       	sbrc	r21, 7
 e9a:	07 d0       	rcall	.+14     	; 0xeaa <__divmodsi4_neg2>
 e9c:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
 ea0:	07 fc       	sbrc	r0, 7
 ea2:	03 d0       	rcall	.+6      	; 0xeaa <__divmodsi4_neg2>
 ea4:	4e f4       	brtc	.+18     	; 0xeb8 <__divmodsi4_exit>
 ea6:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__negsi2>

00000eaa <__divmodsi4_neg2>:
 eaa:	50 95       	com	r21
 eac:	40 95       	com	r20
 eae:	30 95       	com	r19
 eb0:	21 95       	neg	r18
 eb2:	3f 4f       	sbci	r19, 0xFF	; 255
 eb4:	4f 4f       	sbci	r20, 0xFF	; 255
 eb6:	5f 4f       	sbci	r21, 0xFF	; 255

00000eb8 <__divmodsi4_exit>:
 eb8:	08 95       	ret

00000eba <__negsi2>:
 eba:	90 95       	com	r25
 ebc:	80 95       	com	r24
 ebe:	70 95       	com	r23
 ec0:	61 95       	neg	r22
 ec2:	7f 4f       	sbci	r23, 0xFF	; 255
 ec4:	8f 4f       	sbci	r24, 0xFF	; 255
 ec6:	9f 4f       	sbci	r25, 0xFF	; 255
 ec8:	08 95       	ret

00000eca <__umulhisi3>:
 eca:	a2 9f       	mul	r26, r18
 ecc:	b0 01       	movw	r22, r0
 ece:	b3 9f       	mul	r27, r19
 ed0:	c0 01       	movw	r24, r0
 ed2:	a3 9f       	mul	r26, r19
 ed4:	70 0d       	add	r23, r0
 ed6:	81 1d       	adc	r24, r1
 ed8:	11 24       	eor	r1, r1
 eda:	91 1d       	adc	r25, r1
 edc:	b2 9f       	mul	r27, r18
 ede:	70 0d       	add	r23, r0
 ee0:	81 1d       	adc	r24, r1
 ee2:	11 24       	eor	r1, r1
 ee4:	91 1d       	adc	r25, r1
 ee6:	08 95       	ret

00000ee8 <__usmulhisi3>:
 ee8:	0e 94 65 07 	call	0xeca	; 0xeca <__umulhisi3>

00000eec <__usmulhisi3_tail>:
 eec:	b7 ff       	sbrs	r27, 7
 eee:	08 95       	ret
 ef0:	82 1b       	sub	r24, r18
 ef2:	93 0b       	sbc	r25, r19
 ef4:	08 95       	ret

00000ef6 <__udivmodhi4>:
 ef6:	aa 1b       	sub	r26, r26
 ef8:	bb 1b       	sub	r27, r27
 efa:	51 e1       	ldi	r21, 0x11	; 17
 efc:	07 c0       	rjmp	.+14     	; 0xf0c <__udivmodhi4_ep>

00000efe <__udivmodhi4_loop>:
 efe:	aa 1f       	adc	r26, r26
 f00:	bb 1f       	adc	r27, r27
 f02:	a6 17       	cp	r26, r22
 f04:	b7 07       	cpc	r27, r23
 f06:	10 f0       	brcs	.+4      	; 0xf0c <__udivmodhi4_ep>
 f08:	a6 1b       	sub	r26, r22
 f0a:	b7 0b       	sbc	r27, r23

00000f0c <__udivmodhi4_ep>:
 f0c:	88 1f       	adc	r24, r24
 f0e:	99 1f       	adc	r25, r25
 f10:	5a 95       	dec	r21
 f12:	a9 f7       	brne	.-22     	; 0xefe <__udivmodhi4_loop>
 f14:	80 95       	com	r24
 f16:	90 95       	com	r25
 f18:	bc 01       	movw	r22, r24
 f1a:	cd 01       	movw	r24, r26
 f1c:	08 95       	ret

00000f1e <_exit>:
 f1e:	f8 94       	cli

00000f20 <__stop_program>:
 f20:	ff cf       	rjmp	.-2      	; 0xf20 <__stop_program>
